$(command) is “command substitution”.  It runs the command, captures its output, and inserts that into the command line that contains the $(…)
${parameter} is “parameter substitution”. The value of parameter is substituted.  The braces are required when parameter is a positional parameter with more than one digit, or when parameter is followed by a character which is not to be interpreted as part of its name.

${parameter/pattern/string}
The pattern is expanded to produce a pattern just as in filename expansion. Parameter is expanded and the longest match of pattern against its value is replaced with string.

If pattern begins with ‘/’, all matches of pattern are replaced with string. Normally only the first match is replaced.
If pattern begins with ‘#’, it must match at the beginning of the expanded value of parameter.
If pattern begins with ‘%’, it must match at the end of the expanded value of parameter.

If string is null, matches of pattern are deleted and the / following pattern may be omitted.
If the nocasematch shell option (see the description of shopt in The Shopt Builtin) is enabled, the match is performed without regard to the case of alphabetic characters.

If parameter is ‘@’ or ‘*’, the substitution operation is applied to each positional parameter in turn, and the expansion is the resultant list.
If parameter is an array variable subscripted with ‘@’ or ‘*’, the substitution operation is applied to each member of the array in turn, and the expansion is the resultant list.

https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html
